name: "Create Release"
description: "Creates a release using the semantic-release npm package"
inputs:
  branch:
    description: ""
    default: "main"
    required: false
  git-user:
    description: "Git user to use for pushing the release on git."
    required: false
    default: github-actions[bot]
  git-email:
    description: "Git email to use for pushing the release on git."
    required: false
    default: github-actions[bot]@users.noreply.github.com
  node-version:
    description: "The node version to use."
    required: false
    default: "18.12.x"
  user-token:
    description: "Token to be used to checkout the sources."
    required: true
  use-configuration-file:
    description: "Wheter a configuration file shall be used or not. See, https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration-file"
    required: false
    default: "false"
outputs:
  release-version:
    description: "The version of the created release."
    value: ${{ steps.semantic-release.outputs.release-version }}

runs:
  using: composite
  steps:
    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: "npm"

    - name: "Install dependencies"
      run: |
        npm install -g semantic-release \
          @semantic-release/changelog \
          @semantic-release/git
      shell: bash

    - name: Semantic Release
      id: semantic-release
      run: |
        echo Configuring git...
        git config --global user.name ${{ inputs.git-user }}
        git config --global user.email ${{ inputs.git-email }}

        if [[ "${{use-configuration-file}}" != "true" ]]; then
          export RELEASE_VERSION=$(semantic-release --debug true \
            | grep 'Release note' | grep -Po "(\d+)\.(\d+)\.(\d+)")
        else
          export RELEASE_VERSION=$(semantic-release --branches ${{ inputs.branch }} \
            --tag-format '${version}' \
            --plugins '@semantic-release/commit-analyzer,@semantic-release/release-notes-generator,@semantic-release/changelog,@semantic-release/github,@semantic-release/git' \
            --debug true \
            | grep 'Release note' | grep -Po "(\d+)\.(\d+)\.(\d+)")
        fi
        echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ inputs.user-token }}
      shell: bash
